import streamlit as st
from PIL import Image
import uuid
import os
import json
from datetime import datetime



# Configuration de la page
st.set_page_config(page_title="UBCI - Arbre de D√©cision Immobilisation", layout="centered")

# Affichage du logo
try:
    logo = Image.open("./ubci_logo.png")
    st.image(logo, width=150)
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Logo non trouv√©. V√©rifiez que 'ubci_logo.png' est bien dans le dossier du projet.")

st.title("üîç Arbre de D√©cision - Traitement des D√©penses (Banque UBCI)")
st.markdown("Bienvenue dans l'outil interactif d‚Äôaide √† la d√©cision pour la classification des d√©penses selon les normes de la Banque **UBCI**.")

# Affichage du contexte de la d√©pense
if "intitule_depense" in st.session_state:
    with st.expander("üìå D√©pense en cours", expanded=True):
        st.markdown(f"**üìù Intitul√© :** {st.session_state.intitule_depense}")
        if st.session_state.description_depense:
            st.markdown(f"**üìÑ Description :** {st.session_state.description_depense}")

# Initialisation
if 'question_number' not in st.session_state:
    st.session_state.question_number = 1
if 'history' not in st.session_state:
    st.session_state.history = []

if 'intitule_depense' not in st.session_state:
    st.session_state.intitule_depense = ""

if 'description_depense' not in st.session_state:
    st.session_state.description_depense = ""

# Lire l'ID du dossier depuis l'URL si pr√©sent
params = st.query_params
dossier_id_param = params.get("dossier", [None])[0]


# Charger un dossier existant si un param√®tre "dossier" est pass√© dans l'URL
if dossier_id_param and "dossier_id" not in st.session_state:
    chemin = f"data/{dossier_id_param}.json"
    if os.path.exists(chemin):
        with open(chemin, "r") as f:
            data = json.load(f)
            st.session_state.dossier_id = dossier_id_param
            st.session_state.intitule_depense = data.get("intitule", "")
            st.session_state.description_depense = data.get("description", "")
            st.session_state.history = data.get("reponses", [])

            # D√©duire la prochaine question
            if st.session_state.history:
                last_question = st.session_state.history[-1][0]
                try:
                    last_num = int(last_question.replace("Q", ""))
                    st.session_state.question_number = last_num + 1
                except:
                    st.session_state.question_number = 1
            else:
                st.session_state.question_number = 1
    else:
        st.warning("‚ùå Dossier introuvable.")


# Charger un dossier existant si un param√®tre "dossier" est pass√© dans l'URL
if dossier_id_param:
    chemin = f"data/{dossier_id_param}.json"
    if os.path.exists(chemin):
        with open(chemin, "r") as f:
            data = json.load(f)
            st.session_state.dossier_id = dossier_id_param
            st.session_state.intitule_depense = data.get("intitule", "")
            st.session_state.description_depense = data.get("description", "")
            st.session_state.history = data.get("reponses", [])

            # D√©duire la prochaine question √† poser (si possible)
            if st.session_state.history:
                last_question = st.session_state.history[-1][0]  # ex : "Q5"
                try:
                    last_num = int(last_question.replace("Q", ""))
                    st.session_state.question_number = last_num + 1
                except:
                    st.session_state.question_number = 1
            else:
                st.session_state.question_number = 1
    else:
        st.warning("‚ùå Dossier introuvable.")




# Bouton r√©initialisation
def reset():
    st.session_state.question_number = 1
    st.session_state.history = []

st.sidebar.button("üîÑ R√©initialiser", on_click=reset)

# Services disponibles
services = [
    "Demandeur",
    "Comptabilit√© des immobilisations",
    "Fournisseurs / Comptabilit√©",
    "Achats",
    "Contr√¥le de gestion",
    "IT / Juridique",
    "Services G√©n√©raux",
    "RH"
]
service_connecte = st.sidebar.selectbox("üë§ Connect√© en tant que :", services)


# Blocage uniquement si l‚Äôintitul√© est vide ET aucun dossier charg√©
if not st.session_state.intitule_depense:
    if "dossier_id" not in st.session_state:
        if service_connecte != "Comptabilit√© des immobilisations":
            st.error("‚õî L‚Äôoutil est en attente de saisie de l‚Äôintitul√© de la d√©pense par la Comptabilit√© des immobilisations.")
            st.stop()





# Navigation
def next_question():
    st.session_state.question_number += 1

def go_to_question(n):
    st.session_state.question_number = n

def enregistrer_fiche(dossier_id, intitule, description, reponses):
    os.makedirs("data", exist_ok=True)
    with open(f"data/{dossier_id}.json", "w") as f:
        json.dump({
            "intitule": intitule,
            "description": description,
            "reponses": reponses
        }, f)

# Services responsables
services_responsables = {
    1: "Demandeur",
    2: "Comptabilit√© des immobilisations",

    # Immobilisations corporelles
    3: "Demandeur",
    4: "Contr√¥le de gestion",
    5: "Contr√¥le de gestion",
    6: "Achats",
    7: "Demandeur",
    8: "Comptabilit√© des immobilisations",

    # Grosses r√©parations
    9: "Achats",
    10: "Comptabilit√© des immobilisations",
    11: "Contr√¥le de gestion",
    12: "Comptabilit√© des immobilisations",
    13: "Services G√©n√©raux",

    # Immobilisations incorporelles
    14: "Services G√©n√©raux",
    15: "Comptabilit√© des immobilisations",
    16: "Demandeur",
    17: "Contr√¥le de gestion",

    # Acquisition
    18: "Comptabilit√© des immobilisations",

    # Licence
    19: "IT / Juridique",
    20: "Comptabilit√© des immobilisations",
    21: "IT / Juridique",

    # Logiciel
    22: "IT",
    23: "IT",

    # Droit d‚Äôusage
    24: "IT / Juridique",

    # Cr√©ation en interne
    25: "Comptabilit√© des immobilisations",
    26: "Comptabilit√© des immobilisations",

    # D√©penses li√©es √† un actif
    27: "Comptabilit√© des immobilisations",
    28: "Comptabilit√© des immobilisations",
    29: "IT",
    30: "IT",
}


# Fonction pour afficher le service responsable
def afficher_service(question_num):
    service = services_responsables.get(question_num)
    if service:
        st.markdown(f"üë§ **Service concern√© :** {service}")

if service_connecte == "Comptabilit√© des immobilisations" and st.session_state.question_number == 1:
    st.markdown("### üìù Informations sur la d√©pense")

    # G√©n√®re un ID unique une seule fois
    if "dossier_id" not in st.session_state:
        st.session_state.dossier_id = str(uuid.uuid4())[:6]

    st.session_state.intitule_depense = st.text_input("**Intitul√© de la d√©pense** (obligatoire)", st.session_state.intitule_depense)
    st.session_state.description_depense = st.text_area("**Description** (facultatif)", st.session_state.description_depense)

    if not st.session_state.intitule_depense:
        st.warning("‚ö†Ô∏è Veuillez saisir l‚Äôintitul√© de la d√©pense avant de continuer.")
        st.stop()

  
# üìé Afficher lien √† partager si dossier_id existe
if "dossier_id" in st.session_state:
    base_url = "https://ubci-arbre-decision-nzgmblwykw3dwkekw2dzwt.streamlit.app"
    lien = f"{base_url}/?dossier={st.session_state.dossier_id}"

    st.markdown("üîó **Lien √† partager :**")
    st.text_input("URL √† copier", value=lien, label_visibility="collapsed")




libelles_questions = {
    1: "La d√©pense est-elle sup√©rieure √† 500 DT ?",
    2: "La d√©pense concerne-t-elle un bien physique et tangible ?",

    # Immobilisations corporelles
    3: "Est-il destin√© √† √™tre utilis√© pour plus d'un exercice (> 1 an) ?",
    4: "L'entreprise b√©n√©ficie-t-elle des avantages √©conomiques futurs du bien ?",
    5: "Le co√ªt du bien peut-il √™tre mesur√© de mani√®re fiable ?",
    6: "La d√©pense correspond-elle √† des frais d‚Äô√©tude ?",
    7: "Les frais d‚Äô√©tude sont-ils directement li√©s √† la constitution d‚Äôun actif durable ?",
    8: "S'agit-il d'une nouvelle acquisition ?",

    # Grosse r√©paration
    9: "L‚Äôactif initial est-il identifi√© dans SAP en tant qu‚Äôinvestissement ?",
    10: "La valeur v√©nale de la composante est-elle ‚â• 1/4 de la valeur de l‚Äôactif ?",
    11: "Prolonge-t-il la dur√©e de vie de l‚Äô√©l√©ment ou en augmente-t-il la performance ?",
    12: "S‚Äôagit-il d‚Äôune r√©paration ou d‚Äôun renouvellement cyclique d‚Äôune composante essentielle ?",
    13: "S'agit-il d'une panne impr√©vue li√©e √† un bien totalement amorti ou nouvellement acquis ?",

    # Immobilisations incorporelles
    14: "Est-il destin√© √† √™tre utilis√© pour plus d‚Äôun exercice (> 1 an) ?",
    15: "L'entreprise contr√¥le-t-elle l'√©l√©ment et en retire-t-elle des avantages √©conomiques futurs probables ?",
    16: "Le co√ªt peut-il √™tre mesur√© de mani√®re fiable ?",
    17: "S'agit-il d'une acquisition, cr√©ation en interne ou d'une d√©pense li√©e √† un actif ?",

    # Acquisition sous-branches
    18: "L‚Äôacquisition concerne-t-elle une licence, un logiciel ou un droit d‚Äôusage ?",

    # Sous-branche licence
    19: "L‚Äôentreprise dispose-t-elle d‚Äôun droit d‚Äôusage distinct et exclusif de l'actif ?",
    20: "La licence est-elle perp√©tuelle ou accord√©e pour une longue p√©riode (‚â• 3 ans) ?",
    21: "Le contrat pr√©voit-il un abonnement, une redevance ou un paiement r√©current ?",

    # Sous-branche logiciels
    22: "Le logiciel est-il int√©gr√© √† un mat√©riel sans valeur autonome (ex. firmware, OS embarqu√©) ?",
    23: "La licence associ√©e est-elle perp√©tuelle ou accord√©e pour une dur√©e longue (‚â• 3 ans) ?",

    # Sous-branche droit d‚Äôusage
    24: "Le droit d‚Äôusage est-il limit√© dans le temps, sans transfert de contr√¥le ?",

    # Cr√©ation en interne
    25: "S'agit-il de d√©penses de recherche ou de d√©veloppement ?",
    26: "Les conditions IAS 38.57 sont-elles toutes remplies ?",

    # D√©pense li√©e √† un actif
    27: "S'agit-il d'une d√©pense r√©currente (maintenance) ?",
    28: "La d√©pense est-elle directement attribuable √† la pr√©paration de l'actif en vue de son utilisation ?",
    29: "La d√©pense est-elle r√©alis√©e avant ou apr√®s la mise en service de l‚Äôactif ?",
    30: "La d√©pense concerne-t-elle une maintenance √©volutive ou corrective ?"
}


# Affichage historique si "Comptabilit√© des immobilisations":
if service_connecte == "Comptabilit√© des immobilisations":
    with st.expander("üìã Suivi de l‚Äôavancement des r√©ponses"):
        for question_key, reponse in st.session_state.history:
            num = int(question_key.replace("Q", ""))
            texte = libelles_questions.get(num, f"Question {num}")
            st.markdown(f"**{texte}**\n‚û°Ô∏è R√©ponse : `{reponse}`")


# Fonction d'affichage conditionnelle
def afficher_question(num, titre, texte, options, key_radio, bouton_key, suite_callback):
    service_responsable = services_responsables.get(num)
    if service_connecte == service_responsable or service_connecte == "Comptabilit√© des immobilisations":
        st.markdown("---")
        st.subheader(titre)
        afficher_service(num)
        choix = st.radio(texte, options, key=key_radio)

        if st.button("‚û°Ô∏è Suivant", key=bouton_key):
            st.session_state.history.append((f"Q{num}", choix))

            # Enregistrement local
            enregistrer_fiche(
                st.session_state.dossier_id,
                st.session_state.intitule_depense,
                st.session_state.description_depense,
                st.session_state.history
            )

        
            suite_callback(choix)
    else:
        st.warning("‚õî Cette question ne concerne pas votre service.")




# Question 1
if st.session_state.question_number == 1:
    def suite_q1(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : Cette d√©pense est comptabilis√©e en **Charge**.")
    afficher_question(1, "1Ô∏è‚É£ La d√©pense est-elle sup√©rieure √† 500 DT ?", "R√©ponse :", ["Oui", "Non"], "q1", "b1", suite_q1)

# Question 2
elif st.session_state.question_number == 2:
    def suite_q2(choix):
        if choix == "Oui":
            go_to_question(3)
        else:
            go_to_question(14)
    afficher_question(2, "2Ô∏è‚É£ La d√©pense concerne-t-elle un bien physique et tangible ?", "R√©ponse :", ["Oui", "Non"], "q2", "b2", suite_q2)

elif st.session_state.question_number == 3:
    def suite_q3(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : Cette d√©pense est comptabilis√©e en **Charge**.")
    afficher_question(3, "3Ô∏è‚É£ Est-il destin√© √† √™tre utilis√© pour plus d'un exercice (> 1 an) ?", "R√©ponse :", ["Oui", "Non"], "q3", "b3", suite_q3)


elif st.session_state.question_number == 4:
    def suite_q4(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : Cette d√©pense est comptabilis√©e en **Charge**.")
    afficher_question(4, "4Ô∏è‚É£ L'entreprise b√©n√©ficie-t-elle des avantages √©conomiques futurs du bien ?", "R√©ponse :", ["Oui", "Non"], "q4", "b4", suite_q4)


elif st.session_state.question_number == 5:
    def suite_q5(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : Cette d√©pense est comptabilis√©e en **Charge**.")
    afficher_question(5, "5Ô∏è‚É£ Le co√ªt du bien peut-il √™tre mesur√© de mani√®re fiable ?", "R√©ponse :", ["Oui", "Non"], "q5", "b5", suite_q5)


elif st.session_state.question_number == 6:
    def suite_q6(choix):
        if choix == "Oui":
            go_to_question(7)
        else:
            go_to_question(8)
    afficher_question(6, "6Ô∏è‚É£ La d√©pense correspond-elle √† des frais d‚Äô√©tude ?", "R√©ponse :", ["Oui", "Non"], "q6", "b6", suite_q6)


elif st.session_state.question_number == 7:
    def suite_q7(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(7, "7Ô∏è‚É£ Les frais d‚Äô√©tude sont-ils directement li√©s √† un actif durable ?", "R√©ponse :", ["Oui", "Non"], "q7", "b7", suite_q7)


elif st.session_state.question_number == 8:
    def suite_q8(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            go_to_question(9)
    afficher_question(8, "8Ô∏è‚É£ S'agit-il d'une nouvelle acquisition ?", "R√©ponse :", ["Oui", "Non"], "q8", "b8", suite_q8)


elif st.session_state.question_number == 9:
    def suite_q9(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(9, "9Ô∏è‚É£ L‚Äôactif initial est-il identifi√© dans SAP en tant qu‚Äôinvestissement ?", "R√©ponse :", ["Oui", "Non"], "q9", "b9", suite_q9)


elif st.session_state.question_number == 10:
    def suite_q10(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(10, "üîü La valeur v√©nale de la composante est-elle ‚â• 1/4 de la valeur de l‚Äôactif ?", "R√©ponse :", ["Oui", "Non"], "q10", "b10", suite_q10)


elif st.session_state.question_number == 11:
    def suite_q11(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(11, "1Ô∏è‚É£1Ô∏è‚É£ Prolonge-t-il la dur√©e de vie ou augmente-t-il la performance de l‚Äô√©l√©ment ?", "R√©ponse :", ["Oui", "Non"], "q11", "b11", suite_q11)


elif st.session_state.question_number == 12:
    def suite_q12(choix):
        if choix == "R√©habilitation majeure":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            go_to_question(13)
    afficher_question(12, "1Ô∏è‚É£2Ô∏è‚É£ S‚Äôagit-il d‚Äôune r√©paration ou du renouvellement cyclique d‚Äôune composante essentielle ?", "R√©ponse :", ["R√©paration", "R√©habilitation majeure"], "q12", "b12", suite_q12)


elif st.session_state.question_number == 13:
    def suite_q13(choix):
        if choix == "Totalement amorti":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(13, "1Ô∏è‚É£3Ô∏è‚É£ S'agit-il d'une panne impr√©vue li√©e √† un bien totalement amorti ou nouvellement acquis ?", "R√©ponse :", ["Totalement amorti", "Nouvellement acquis"], "q13", "b13", suite_q13)

# Question 14
elif st.session_state.question_number == 14:
    def suite_q14(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(14, "1Ô∏è‚É£4Ô∏è‚É£ Est-il destin√© √† √™tre utilis√© pour plus d‚Äôun exercice (> 1 an) ?", "R√©ponse :", ["Oui", "Non"], "q14", "b14", suite_q14)


# Question 15
elif st.session_state.question_number == 15:
    def suite_q15(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(15, "1Ô∏è‚É£5Ô∏è‚É£ L'entreprise contr√¥le-t-elle l'√©l√©ment et en retire-t-elle des avantages √©conomiques futurs probables ?", "R√©ponse :", ["Oui", "Non"], "q15", "b15", suite_q15)


# Question 16
elif st.session_state.question_number == 16:
    def suite_q16(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(16, "1Ô∏è‚É£6Ô∏è‚É£ Le co√ªt peut-il √™tre mesur√© de mani√®re fiable ?", "R√©ponse :", ["Oui", "Non"], "q16", "b16", suite_q16)

# Question 17
elif st.session_state.question_number == 17:
    def suite_q17(choix):
        if choix == "Acquisition":
            go_to_question(18)
        elif choix == "Cr√©ation en interne":
            go_to_question(25)
        else:
            go_to_question(27)
    afficher_question(17, "1Ô∏è‚É£7Ô∏è‚É£ S'agit-il d'une acquisition, cr√©ation en interne ou d'une d√©pense li√©e √† un actif ?", "R√©ponse :", ["Acquisition", "Cr√©ation en interne", "D√©pense li√©e √† un actif"], "q17", "b17", suite_q17)


# Question 18
elif st.session_state.question_number == 18:
    def suite_q18(choix):
        if choix == "Licence":
            go_to_question(19)
        elif choix == "Logiciel":
            go_to_question(22)
        else:
            go_to_question(24)
    afficher_question(18, "1Ô∏è‚É£8Ô∏è‚É£ L‚Äôacquisition concerne-t-elle une licence, un logiciel ou un droit d‚Äôusage ?", "R√©ponse :", ["Licence", "Logiciel", "Droit d‚Äôusage"], "q18", "b18", suite_q18)


# Question 19
elif st.session_state.question_number == 19:
    def suite_q19(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(19, "üîπ L‚Äôentreprise dispose-t-elle d‚Äôun droit d‚Äôusage distinct et exclusif de l'actif ?", "R√©ponse :", ["Oui", "Non"], "q19", "b19", suite_q19)


# Question 20
elif st.session_state.question_number == 20:
    def suite_q20(choix):
        if choix == "Oui":
            next_question()
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(20, "üîπ La licence est-elle perp√©tuelle ou accord√©e pour une longue p√©riode (‚â• 3 ans) ?", "R√©ponse :", ["Oui", "Non"], "q20", "b20", suite_q20)


# Question 21
elif st.session_state.question_number == 21:
    def suite_q21(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Charge**")
        else:
            st.success("‚úÖ Conclusion : **Immobilisation incorporelle**")
    afficher_question(21, "üîπ Le contrat pr√©voit-il un abonnement, une redevance ou un paiement r√©current ?", "R√©ponse :", ["Oui", "Non"], "q21", "b21", suite_q21)


# Question 22
elif st.session_state.question_number == 22:
    def suite_q22(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            next_question()
    afficher_question(22, "üîπ Le logiciel est-il int√©gr√© √† un mat√©riel sans valeur autonome (ex. firmware, OS embarqu√©) ?", "R√©ponse :", ["Oui", "Non"], "q22", "b22", suite_q22)


# Question 23
elif st.session_state.question_number == 23:
    def suite_q23(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Immobilisation incorporelle**")
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(23, "üîπ La licence associ√©e est-elle perp√©tuelle ou ‚â• 3 ans ?", "R√©ponse :", ["Oui", "Non"], "q23", "b23", suite_q23)


# Question 24
elif st.session_state.question_number == 24:
    def suite_q24(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Charge**")
        else:
            st.success("‚úÖ Conclusion : **Immobilisation incorporelle**")
    afficher_question(24, "üîπ Le droit d‚Äôusage est-il limit√© dans le temps, sans transfert de contr√¥le ?", "R√©ponse :", ["Oui", "Non"], "q24", "b24", suite_q24)


# Question 25
elif st.session_state.question_number == 25:
    def suite_q25(choix):
        if choix == "Recherche":
            st.success("‚úÖ Conclusion : **Charge**")
        else:
            next_question()
    afficher_question(25, "üß™ S'agit-il de d√©penses de recherche ou de d√©veloppement ?", "R√©ponse :", ["Recherche", "D√©veloppement"], "q25", "b25", suite_q25)

# Question 26
elif st.session_state.question_number == 26:
    if service_connecte == services_responsables.get(26) or service_connecte == "Comptabilit√© des immobilisations":
        st.subheader("üß™ Les conditions IAS 38.57 sont-elles toutes remplies ?")
        afficher_service(26)
        conditions = [
            st.checkbox("Faisabilit√© technique", key="ias1"),
            st.checkbox("Intention d‚Äôachever le projet", key="ias2"),
            st.checkbox("Capacit√© √† utiliser ou vendre l'actif", key="ias3"),
            st.checkbox("Avantages √©conomiques futurs probables", key="ias4"),
            st.checkbox("Ressources disponibles", key="ias5"),
            st.checkbox("D√©penses √©valu√©es de fa√ßon fiable", key="ias6")
        ]
        if st.button("‚û°Ô∏è Suivant", key="b26"):
            if all(conditions):
                st.success("‚úÖ Conclusion : **Immobilisation incorporelle**")
            else:
                st.success("‚úÖ Conclusion : **Charge**")
    else:
        st.warning("‚õî Cette question ne concerne pas votre service.")

# Question 27
elif st.session_state.question_number == 27:
    def suite_q27(choix):
        if choix == "Oui":
            go_to_question(29)
        else:
            go_to_question(28)
    afficher_question(27, "üîß S'agit-il d'une d√©pense r√©currente (maintenance) ?", "R√©ponse :", ["Oui", "Non"], "q27", "b27", suite_q27)


# Question 28
elif st.session_state.question_number == 28:
    def suite_q28(choix):
        if choix == "Oui":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(
        28,
        "üîß La d√©pense est-elle directement attribuable √† la pr√©paration de l'actif en vue de son utilisation ?",
        "Exemples : co√ªts du personnel, honoraires, tests...",
        ["Oui", "Non"],
        "q28",
        "b28",
        suite_q28
    )


# Question 29
elif st.session_state.question_number == 29:
    def suite_q29(choix):
        if choix == "Avant":
            st.success("‚úÖ Conclusion : **Immobilisation incorporelle**")
        else:
            next_question()
    afficher_question(
        29,
        "üîß La d√©pense est-elle r√©alis√©e avant ou apr√®s la mise en service de l‚Äôactif ?",
        "R√©ponse :",
        ["Avant", "Apr√®s"],
        "q29",
        "b29",
        suite_q29
    )


# Question 30
elif st.session_state.question_number == 30:
    def suite_q30(choix):
        if choix == "√âvolutive":
            st.success("‚úÖ Conclusion : **Immobilisation corporelle**")
        else:
            st.success("‚úÖ Conclusion : **Charge**")
    afficher_question(
        30,
        "üîß La maintenance est-elle √©volutive ou corrective ?",
        "√âvolutive = am√©lioration / adaptation\nCorrective = r√©paration du fonctionnement initial",
        ["√âvolutive", "Corrective"],
        "q30",
        "b30",
        suite_q30
    )


